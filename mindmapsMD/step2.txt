//Instructions Topic Expansion
- If the user ask for more details about a {subtopic}, then:
- Review the initial mind map structure you generated with step1.txt to understand the hierarchical placement of the {subtopic} needing expansion.
- Identify Expansion Points: Pinpoint which areas within the selected {subtopic} can be elaborated upon, incorporating new sub-points or further elucidating existing ones.
- Maintain Hierarchy in Expansion: When adding details to the {subtopic}, ensure that the added content begins with markdown headers (#) corresponding to the same level of detail as the original section generated in step1.txt. This alignment preserves the hierarchical structure of the mind map.
- Integrate New Details Appropriately: Incorporate additional context, evidence, or examples as sub-sections within the topic, adhering to the established depth. These additions should be seamlessly integrated, maintaining the mind map's overall structure.
- Present the Expanded Section: Utilize 'code.mindmap' to format the newly expanded section into markdown, starting the output with markdown headers at the appropriate level, mirroring the depth of the original topic. The output should directly reflect the updated structure in a code box, with no additional text surrounding it.

//Dictionary Structure Topic Expansion
- Start with the detailed topic using the appropriate level of markdown headers (#) as indicated by the existing hierarchy in the mind map.
- Nest additional subtopics or details as dictionaries within this topic, maintaining the structural depth.
- Represent expanded details and sub-points as key-value pairs within their respective subtopic. Use empty dictionaries ({}) for subtopics or details that are mentioned without further elaboration but are planned for future expansion.
- Ensure the expanded content begins at the appropriate hierarchy level, using markdown headers (#) to maintain the structure and clarity of the mind map.
- The expanded content should be formatted into markdown and presented in a code box, focusing on integrating additional context, evidence, or examples that enhance the original discussion, without surrounding text.


//code.mindmap
def expand_section(data, path, new_data):
    # Base case: Path is empty, target section reached
    if not path:
        data.update(new_data)
        return

    # Recursive case: Traverse to the next level
    next_level = path.pop(0)
    if next_level in data:
        expand_section(data[next_level], path, new_data)
    else:
        print(f"Section '{next_level}' not found.")

def print_markdown(mind_map, depth=1):
    for key, value in mind_map.items():
        # Print the key with the appropriate number of '#' based on the depth
        print(f"{'#' * depth} {key}\n")

        if isinstance(value, dict):
            # If the value is a dictionary, recursively call the function with increased depth
            # Increase depth by 1 only if the dictionary is not empty to maintain hierarchy correctly
            print_markdown(value, depth + (1 if value else 0))
        elif isinstance(value, str):
            # If the value is a string, print it as a list item
            print(f"- {value}\n")  # Corrected to print the value directly
        else:
            # If the value is an empty dictionary, just print a placeholder
            print("- {}\n")

# Demonstrate use of expand_section with a corrected print_markdown function
mind_map = {
    "Root": {
        "Section1": {
            "SubsectionA": {}
        },
        "Section2": {}
    }
}

# Define the path to the target section and the new data to add
path_to_expand = ["Root", "Section1", "SubsectionA"]
new_subsection_data = {"NewSubsection": "Details"}

//output
- the output should be presented directly in a code box without any preceding or following text.
- after the code box provide the instruction to generate the mindmap online: 1. copy the text and 2. paste it online following this link  'https://markmap.js.org/repl' , give a hint that the text should be pasted on the left side and replace the text that is already there.
