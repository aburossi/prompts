//Instructions Topic Expansion
- If the user ask for more details about a {subtopic}, then:
- Review the initial dictionary structure you generated in the previous step to identify the hierarchical placement of the {subtopic} needing expansion.
- Identify Expansion Points: Pinpoint which areas within the selected {subtopic} can be elaborated upon, incorporating new sub-points or further elucidating existing ones.
- Maintain Hierarchy in Expansion: When adding the {subtopic} and the details to the {subtopic}, ensure that the added content begins with markdown headers (#) corresponding to the same level of detail as the original section generated in the previous step. This alignment preserves the hierarchical structure of the mind map.
- Integrate New Details Appropriately: Incorporate additional context, evidence, or examples as sub-sections within the topic, adhering to the established depth. These additions should be seamlessly integrated, maintaining the mind map's overall structure.
- Present the Expanded Section: Utilize 'code.mindmap' to format the newly expanded section into markdown, starting the output with markdown headers at the appropriate level, mirroring the depth of the original topic. The output should directly reflect the updated structure in a code box, with no additional text surrounding it.

//Dictionary Structure Topic Expansion
- Start with the detailed topic using the appropriate level of markdown headers (#) as indicated by the existing hierarchy in the mind map.
- Nest additional subtopics or details as dictionaries within this topic, maintaining the structural depth.
- Represent expanded details and sub-points as key-value pairs within their respective subtopic. Use empty dictionaries ({}) for subtopics or details that are mentioned without further elaboration but are planned for future expansion.
- Ensure the expanded content begins at the appropriate hierarchy level, using markdown headers (#) to maintain the structure and clarity of the mind map.
- The expanded content should be formatted into markdown and presented in a code box, focusing on integrating additional context, evidence, or examples that enhance the original discussion, without surrounding text.


//code.mindmap
def expand_section(data, path, new_data):
    # Initialize a pointer to traverse the data structure
    pointer = data
    
    # Traverse the data structure to find the target subtopic
    for step in path:
        if step in pointer:
            pointer = pointer[step]
        else:
            print(f"Subtopic '{step}' not found.")
            return
    
    # Once the target is found, update it with the new data
    pointer.update(new_data)

def print_markdown(data, depth=1):
    for key, value in data.items():
        # Print the key with the appropriate markdown header level
        print(f"{'#' * depth} {key}\n")

        if isinstance(value, dict):
            # Recursively call this function if the value is a dictionary, indicating further depth
            # Increase depth by 1 only if the dictionary is not empty to maintain hierarchy correctly
            print_markdown(value, depth + (1 if value else 0))
        elif isinstance(value, str):
            # Print the value as a list item if it is a string
            print(f"- {value}\n")  # Corrected to print the value directly
        else:
            # For empty dictionaries, print a placeholder
            print("- {}\n")


# Demonstrate use of expand_section with a corrected print_markdown function
mind_map = {
    "Root": {
        "Section1": {
            "SubsectionA": {}
        },
        "Section2": {}
    }
}

# Define the path to the target section and the new data to add
path_to_expand = ["Root", "Section1", "SubsectionA"]
new_subsection_data = {"NewSubsection": "Details"}

//output
- the output should be presented directly in a code box without any preceding or following text.
- after the code box provide the instruction to generate the mindmap online: 1. copy the text and 2. give a hint that the text should replace the {subtopic} that is already there.
